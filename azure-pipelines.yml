# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  organization: 'AndrePostiga'
  
  publish_main_app: 'true'
  publish_extensions: 'false'

  net_version: 'netstandard2.0'
  execute_test: 'true'
  test_project_base_folder: 'src/AspNetStandard.Diagnostics.HealthChecks.Tests'
  test_project_path: 'src/AspNetStandard.Diagnostics.HealthChecks.Tests/AspNetStandard.Diagnostics.HealthChecks.Tests.csproj'  
  solution_path: 'src/AspNetStandard.Diagnostics.HealthChecks.sln'

  project_name: 'AspNetStandard.Diagnostics.HealthChecks'
  redis_extension_name: 'AspNetStandard.Diagnostics.HealthChecks.Redis'
  mongo_extension_name: 'AspNetStandard.Diagnostics.HealthChecks.MongoDb'
  rabbitmq_extension_name: 'AspNetStandard.Diagnostics.HealthChecks.RabbitMq'
  sqlserver_extension_name: 'AspNetStandard.Diagnostics.HealthChecks.SqlServer'

  project_path: 'src/AspNetStandard.Diagnostics.HealthChecks/AspNetStandard.Diagnostics.HealthChecks.csproj'
  redis_extension_path: 'src/AspNetStandard.Diagnostics.HealthChecks.Redis/AspNetStandard.Diagnostics.HealthChecks.Redis.csproj'
  mongo_extension_path: 'src/AspNetStandard.Diagnostics.HealthChecks.MongoDb/AspNetStandard.Diagnostics.HealthChecks.MongoDb.csproj'
  rabbitmq_extension_path: 'src/AspNetStandard.Diagnostics.HealthChecks.RabbitMq/AspNetStandard.Diagnostics.HealthChecks.RabbitMq.csproj'
  sqlserver_extension_path: 'src/AspNetStandard.Diagnostics.HealthChecks.SqlServer/AspNetStandard.Diagnostics.HealthChecks.SqlServer.csproj'

  execute_sonarcloud: 'true'
  sonarcloud_project: 'AndrePostiga_AspNetStandard.Diagnostics.HealthChecks'
  sonarcloud_organization: 'andrepostiga'
  sonarcloud_account: 'SonarCloudAndre'

trigger:
  branches:
    include:
    - release/*  
    - hotfix/*
    - dev
  tags:
    include: 
    - '*'

pr:
  branches:
    include:
    - dev
    - master


pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: BuildApp
  jobs:
  - job: PreBuild
    workspace:
      clean: all
    variables:
      current_counter: $[counter(variables['Build.SourceBranchName'], 1)] 
      #Branch name is the last path segment in the ref ex: refs/heads/release/1.0.1 will be 1.0.1
    steps:
    - bash: |
        if [[ "$(Build.SourceVersionMessage)" =~ "hotfix/" ]];
        then 
            echo "##vso[task.setvariable variable=IsHotfix;isOutput=true]true"
            echo "##vso[task.setvariable variable=PreviousPrefix;isOutput=true]hotfix"
        else
            echo "##vso[task.setvariable variable=IsHotfix;isOutput=true]false"
            echo "##vso[task.setvariable variable=PreviousPrefix;isOutput=true]release"
        fi
        if [[ "$(Build.SourceBranch)" =~ "/hotfix/" ]] || [[ "$(Build.SourceBranch)" =~ "/release/" ]]; 
        then
            echo "Generate Preview Release Version"
            echo "Version: $(Build.SourceBranchName)"
            echo "         $(Build.SourceBranchName)-preview.$(current_counter)"
            echo "##vso[build.updatebuildnumber]$(Build.SourceBranchName)-preview.$(current_counter)"
            echo "##vso[task.setvariable variable=PureVersion;isOutput=true]$(Build.SourceBranchName)"
        elif [[ "$(Build.SourceBranch)" =~ "/tags/" ]];
        then
            echo "Generate Release Version"
            echo "Version: $(Build.SourceBranchName)"
            echo "##vso[build.updatebuildnumber]$(Build.SourceBranchName)"
            echo "##vso[task.setvariable variable=SonarMasterWhenTag;isOutput=true]sonar.branch.name=master"
            echo "##vso[task.setvariable variable=PureVersion;isOutput=true]$(Build.SourceBranchName)"
        else
            echo "Generate Development Version"
            echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)-develop"
            echo "Version: $(Build.BuildNumber)-develop"
        fi
      displayName: Update Version Number
      name: PreBuildTask    
  - job: Build
    dependsOn: 
    - PreBuild
    condition: succeeded()
    workspace:
      clean: all      
    steps:
    - script: |
        pwd && ls -la
        dotnet restore "$(solution_path)"
        dotnet publish -c Release -o $(System.DefaultWorkingDirectory)/binaries/$(project_name)/bin "$(project_path)" -f netstandard2.0
        dotnet publish -c Release -o $(System.DefaultWorkingDirectory)/binaries/$(redis_extension_name)/bin "$(redis_extension_path)" -f netstandard2.0
        dotnet publish -c Release -o $(System.DefaultWorkingDirectory)/binaries/$(mongo_extension_name)/bin "$(mongo_extension_path)" -f netstandard2.0
        dotnet publish -c Release -o $(System.DefaultWorkingDirectory)/binaries/$(rabbitmq_extension_name)/bin "$(rabbitmq_extension_path)" -f netstandard2.0
        dotnet publish -c Release -o $(System.DefaultWorkingDirectory)/binaries/$(sqlserver_extension_name)/bin "$(sqlserver_extension_path)" -f netstandard2.0
        mkdir artifact
        cp -r $(System.DefaultWorkingDirectory)/binaries artifact/binaries
      displayName: Build Application
    - task: PublishPipelineArtifact@1
      displayName: HealthCheck MainLib Artifact
      inputs:
        path: $(System.DefaultWorkingDirectory)/binaries/$(project_name)
        artifact: $(project_name)
    - task: PublishPipelineArtifact@1
      displayName: HealthCheck Redis Extension Lib Artifact
      inputs:
        path: $(System.DefaultWorkingDirectory)/binaries/$(redis_extension_name)
        artifact: $(redis_extension_name)
    - task: PublishPipelineArtifact@1
      displayName: HealthCheck Mongo Extension Lib Artifact
      inputs:
        path: $(System.DefaultWorkingDirectory)/binaries/$(mongo_extension_name)
        artifact: $(mongo_extension_name)
    - task: PublishPipelineArtifact@1
      displayName: HealthCheck RabbitMq Extension Lib Artifact
      inputs:
        path: $(System.DefaultWorkingDirectory)/binaries/$(rabbitmq_extension_name)
        artifact: $(rabbitmq_extension_name)
    - task: PublishPipelineArtifact@1
      displayName: HealthCheck SQLServer Extension Lib Artifact
      inputs:
        path: $(System.DefaultWorkingDirectory)/binaries/$(sqlserver_extension_name)
        artifact: $(sqlserver_extension_name)
  - job: UnitTests
    dependsOn:
    - PreBuild
    - Build    
    workspace:
      clean: all
    condition: and(succeeded(), eq(variables['execute_test'], 'true'))
    steps:
      - script: |
          dotnet tool install --global coverlet.console 
          dotnet tool install dotnet-reportgenerator-globaltool --tool-path . 
          dotnet add $(test_project_path) package coverlet.msbuild
          dotnet add $(test_project_path) package XunitXml.TestLogger
          dotnet test /p:CollectCoverage=true \
                      /p:CoverletOutputFormat=\"opencover,cobertura\" \
                      /p:CoverletOutput=results/result \
                      /p:Exclude=[xunit.*]* "$(solution_path)" \
                      --test-adapter-path:. --logger:"xunit;LogFilePath=results/result.xunit.xml"
          ./reportgenerator "-reports:$(test_project_base_folder)/results/result.opencover.xml" \
                            "-targetdir:$(test_project_base_folder)/results/Cobertura" \
                            "-reporttypes:Cobertura;HTMLInline;HTMLChart"
          echo "##vso[task.setvariable variable=OpencoverSonar;isOutput=true]sonar.cs.opencover.reportsPaths=$(Pipeline.Workspace)/result.opencover.xml"
          ls $(System.DefaultWorkingDirectory)/$(test_project_base_folder)/results
        displayName: Running Unit Tests
        name: UnitTestsTask
      - task: PublishPipelineArtifact@1
        displayName: Store Test Result
        inputs:
          path: $(System.DefaultWorkingDirectory)/$(test_project_base_folder)/results
          artifact: UnitTestResults
      - task: PublishCodeCoverageResults@1
        displayName: Publish Code Coverage 
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: $(System.DefaultWorkingDirectory)/$(test_project_base_folder)/results/result.cobertura.xml
          pathToSources: .
          failIfCoverageEmpty: true
      - task: PublishTestResults@2
        displayName: Publish Test Result
        inputs:
          testResultsFormat: 'XUnit'
          testResultsFiles: '$(System.DefaultWorkingDirectory)/$(test_project_base_folder)/results/result.xunit.xml'
          testRunTitle: 'Collecting Test Results'
  - job: QA
    dependsOn: 
      - PreBuild
      - Build
      - UnitTests
    condition: |
      and
      (
        in(dependencies.PreBuild.result, 'Succeeded'),
        in(dependencies.Build.result, 'Succeeded', 'Skipped'),
        in(dependencies.UnitTests.result, 'Succeeded', 'Skipped'),
        eq(variables['execute_sonarcloud'], 'true')
      )
    workspace:
      clean: all
    variables:
      SonarMasterWhenTag: $[ dependencies.UpdateBuildVersion.outputs['UpdateBuildVersionTask.SonarMasterWhenTag'] ]
      OpencoverSonar: $[ dependencies.UnitTests.outputs['UnitTestsTask.OpencoverSonar'] ]
    steps:
      - task: DownloadPipelineArtifact@2
        displayName: Get Unit Test Result
        condition: eq(variables['execute_test'], 'true')
        inputs:
          artifact: UnitTestResults
      - task: SonarCloudPrepare@1
        displayName: Start Sonarqube Analysis
        inputs:
          SonarCloud: '$(sonarcloud_account)'
          organization: '$(sonarcloud_organization)'
          scannerMode: 'MSBuild'
          projectKey: '$(sonarcloud_project)'
          projectName: '$(project_name)'
          extraProperties: |
            sonar.sourceEncoding=UTF-8
            sonar.scm.forceReloadAll=true
            $(OpencoverSonar)
            $(SonarMasterWhenTag)
      - script: |
          dotnet build "$(solution_path)"
        displayName: Running Build for QA
      - task: SonarCloudAnalyze@1
        displayName: Finish Sonarqube Analysis
      - task: SonarCloudPublish@1
        displayName: Publish Sonarqube Analysis
        inputs:
          pollingTimeoutSec: '300'
  - job: PackingNuget
    dependsOn:
    - PreBuild
    - Build
    - UnitTests
    - QA
    workspace:
      clean: all
    condition: |
      and
      (
        eq(dependencies.PreBuild.result, 'Succeeded'),
        in(dependencies.Build.result, 'Succeeded', 'Skipped'),
        in(dependencies.UnitTests.result, 'Succeeded', 'Skipped'),
        in(dependencies.QA.result, 'Succeeded', 'Skipped'),
        or
        (
          contains(variables['Build.SourceBranch'], '/hotfix/'),
          contains(variables['Build.SourceBranch'], '/release/'),
          contains(variables['Build.SourceBranch'], '/tags/')
        )
      )
    variables:
      ReleaseVersion: $(Build.BuildNumber) 
      PureVersion: $[ dependencies.PreBuild.outputs['PreBuildTask.PureVersion'] ]
    steps:
    - script: |
          dotnet publish -c Release "$(project_path)" -f netstandard2.0
      displayName: Running Build for Packing
    - task: DotNetCoreCLI@2
      displayName: 'Packing HC Release'
      inputs:
        command: 'custom'
        projects: '$(project_path)'
        custom: 'pack'
        arguments: '-p:Configuration=Release -p:PackageVersion=$(ReleaseVersion) -p:Version=$(PureVersion) --output $(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@1
      displayName: Store Nuget Packages
      inputs:
        path: $(Build.ArtifactStagingDirectory)
        artifact: HcNugetPackage

- stage: PublishMainHc
  dependsOn: BuildApp
  condition: |
    and
    (
      eq(variables['publish_main_app'], 'true'),
      succeeded(),
      or
      (
        contains(variables['Build.SourceBranch'], '/hotfix/'),
        contains(variables['Build.SourceBranch'], '/release/'),
        contains(variables['Build.SourceBranch'], '/tags/')
      )
    )
  jobs:
  - job: PublishHCNugetPackage
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Get HealthCheck Artifact
      inputs:
        artifact: HcNugetPackage
    - task: DotNetCoreCLI@2
      displayName: Publish HealthCheck package on nuget.org
      inputs:
        command: custom
        custom: nuget
        arguments: >
          push $(Pipeline.Workspace)/$(project_name).$(Build.BuildNumber).nupkg
          -s $(NugetPushUrl)
          -k $(NugetApiKey)

- stage: PackExtensions
  dependsOn: 
  - BuildApp
  condition: |
    and
    (
      succeeded(),
      or
      (
        contains(variables['Build.SourceBranch'], '/hotfix/'),
        contains(variables['Build.SourceBranch'], '/release/'),
        contains(variables['Build.SourceBranch'], '/tags/')
      )
    )
  variables:
    ReleaseVersion: $(Build.BuildNumber) 
    PureVersion: $[ stageDependencies.BuildApp.PreBuild.outputs['PreBuildTask.PureVersion'] ]
  jobs:
    - job: PackingExtensions
      steps:
      - script: |
            dotnet publish -c Release "$(redis_extension_path)" -f netstandard2.0
            dotnet publish -c Release "$(mongo_extension_path)" -f netstandard2.0
            dotnet publish -c Release "$(rabbitmq_extension_path)" -f netstandard2.0
            dotnet publish -c Release "$(sqlserver_extension_path)" -f netstandard2.0
        displayName: Running Build for Packing    
      - task: DotNetCoreCLI@2
        displayName: 'Packing redisExtension Release'
        inputs:
          command: 'custom'
          projects: '$(redis_extension_path)'
          custom: 'pack'
          arguments: '-p:Configuration=Release -p:PackageVersion=$(ReleaseVersion) -p:Version=$(PureVersion) --output $(Build.ArtifactStagingDirectory)'
      - task: PublishPipelineArtifact@1
        displayName: Store redisExtension Package
        inputs:
          path: $(Build.ArtifactStagingDirectory)
          artifact: redisPackage

      - task: DotNetCoreCLI@2
        displayName: 'Packing mongoExtension Release'
        inputs:
          command: 'custom'
          projects: '$(mongo_extension_path)'
          custom: 'pack'
          arguments: '-p:Configuration=Release -p:PackageVersion=$(ReleaseVersion) -p:Version=$(PureVersion) --output $(Build.ArtifactStagingDirectory)'    
      - task: PublishPipelineArtifact@1
        displayName: Store mongoExtension Package
        inputs:
          path: $(Build.ArtifactStagingDirectory)
          artifact: mongoPackage

      - task: DotNetCoreCLI@2
        displayName: 'Packing rabbitmqExtension Release'
        inputs:
          command: 'custom'
          projects: '$(rabbitmq_extension_path)'
          custom: 'pack'
          arguments: '-p:Configuration=Release -p:PackageVersion=$(ReleaseVersion) -p:Version=$(PureVersion) --output $(Build.ArtifactStagingDirectory)'
      - task: PublishPipelineArtifact@1
        displayName: Store rabbitmqExtension Package
        inputs:
          path: $(Build.ArtifactStagingDirectory)
          artifact: rabbitmqPackage

      - task: DotNetCoreCLI@2
        displayName: 'Packing sqlserverExtension Release'
        inputs:
          command: 'custom'
          projects: '$(sqlserver_extension_path)'
          custom: 'pack'
          arguments: '-p:Configuration=Release -p:PackageVersion=$(ReleaseVersion) -p:Version=$(PureVersion) --output $(Build.ArtifactStagingDirectory)'
      - task: PublishPipelineArtifact@1
        displayName: Store sqlserverExtension Packages
        inputs:
          path: $(Build.ArtifactStagingDirectory)
          artifact: sqlserverPackage

- stage: PublishExtensions
  dependsOn: PackExtensions
  condition: |
    and
    (
      eq(variables['publish_extensions'], 'true'),
      succeeded(),
      or
      (
        contains(variables['Build.SourceBranch'], '/hotfix/'),
        contains(variables['Build.SourceBranch'], '/release/'),
        contains(variables['Build.SourceBranch'], '/tags/')
      )
    )
  jobs:
  - job: PublishExtensionsNugetPackages
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Get redisPackage Artifact
      inputs:
        artifact: redisPackage
    - task: DotNetCoreCLI@2
      displayName: Publish redisPackage on nuget.org
      inputs:
        command: custom
        custom: nuget
        arguments: >
          push $(Pipeline.Workspace)/$(redis_extension_name).$(Build.BuildNumber).nupkg
          -s $(NugetPushUrl)
          -k $(NugetApiKey)

    - task: DownloadPipelineArtifact@2
      displayName: Get mongoPackage Artifact
      inputs:
        artifact: mongoPackage
    - task: DotNetCoreCLI@2
      displayName: Publish mongoPackage on nuget.org
      inputs:
        command: custom
        custom: nuget
        arguments: >
          push $(Pipeline.Workspace)/$(mongo_extension_name).$(Build.BuildNumber).nupkg
          -s $(NugetPushUrl)
          -k $(NugetApiKey)
  
    - task: DownloadPipelineArtifact@2
      displayName: Get rabbitmqPackage Artifact
      inputs:
        artifact: rabbitmqPackage
    - task: DotNetCoreCLI@2
      displayName: Publish rabbitmqPackage on nuget.org
      inputs:
        command: custom
        custom: nuget
        arguments: >
          push $(Pipeline.Workspace)/$(rabbitmq_extension_name).$(Build.BuildNumber).nupkg
          -s $(NugetPushUrl)
          -k $(NugetApiKey)

    - task: DownloadPipelineArtifact@2
      displayName: Get sqlserverPackage Artifact
      inputs:
        artifact: sqlserverPackage
    - task: DotNetCoreCLI@2
      displayName: Publish sqlserverPackage on nuget.org
      inputs:
        command: custom
        custom: nuget
        arguments: >
          push $(Pipeline.Workspace)/$(sqlserver_extension_name).$(Build.BuildNumber).nupkg
          -s $(NugetPushUrl)
          -k $(NugetApiKey)